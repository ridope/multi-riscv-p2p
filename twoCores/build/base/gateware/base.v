// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : base.v
// Device     : 10M50DAF484C7G
// LiteX sha1 : b020d4cf
// Date       : 2022-05-14 10:21:17
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module base (
	input  wire clk50,
	input  wire altera_reserved_tms,
	input  wire altera_reserved_tck,
	input  wire altera_reserved_tdi,
	output wire altera_reserved_tdo,
	output reg  user_led0,
	output reg  user_led1,
	output reg  user_led2,
	output reg  user_led3,
	output reg  user_led4,
	output reg  user_led5,
	output reg  user_led6,
	output reg  user_led7,
	output reg  user_led8,
	output reg  user_led9,
	output reg  serial_tx,
	input  wire serial_rx,
	input  wire user_sw0
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  crg_rst0 = 1'd0;
reg  sys_clk = 1'd0;
reg  sys_rst = 1'd0;
reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
reg  jtagbone_phy_sink_sink_valid = 1'd0;
wire jtagbone_phy_sink_sink_ready;
reg  jtagbone_phy_sink_sink_first = 1'd0;
wire jtagbone_phy_sink_sink_last;
reg  [7:0] jtagbone_phy_sink_sink_payload_data = 8'd0;
wire jtagbone_phy_source_source_valid;
reg  jtagbone_phy_source_source_ready = 1'd0;
wire jtagbone_phy_source_source_first;
wire jtagbone_phy_source_source_last;
wire [7:0] jtagbone_phy_source_source_payload_data;
reg  jtagbone_phy_jtag_reset = 1'd0;
reg  jtagbone_phy_jtag_capture = 1'd0;
wire jtagbone_phy_jtag_shift;
wire jtagbone_phy_jtag_update;
wire jtagbone_phy_jtag_runtest;
wire jtagbone_phy_jtag_drck;
wire jtagbone_phy_jtag_sel;
wire jtagbone_phy_jtag_tck;
wire jtagbone_phy_jtag_tms;
wire jtagbone_phy_jtag_tdi;
reg  jtagbone_phy_jtag_tdo = 1'd0;
wire jtagbone_phy_jtag_altera_reserved_tck;
wire jtagbone_phy_jtag_altera_reserved_tms;
wire jtagbone_phy_jtag_altera_reserved_tdi;
wire jtagbone_phy_jtag_altera_reserved_tdo;
reg  jtagbone_phy_jtag_tdouser = 1'd0;
wire jtagbone_phy_jtag_tmsutap;
wire jtagbone_phy_jtag_tckutap;
wire jtagbone_phy_jtag_tdiutap;
wire jtag_inv_clk;
wire jtag_inv_rst;
reg  jtagbone_phy_jtag_ongoing0 = 1'd0;
reg  jtagbone_phy_jtag_ongoing1 = 1'd0;
reg  jtagbone_phy_jtag_ongoing2 = 1'd0;
reg  jtagbone_phy_jtag_ongoing3 = 1'd0;
reg  jtagbone_phy_jtag_ongoing4 = 1'd0;
reg  jtagbone_phy_jtag_ongoing5 = 1'd0;
reg  jtagbone_phy_jtag_ongoing6 = 1'd0;
reg  jtagbone_phy_jtag_ongoing7 = 1'd0;
reg  jtagbone_phy_jtag_ongoing8 = 1'd0;
reg  jtagbone_phy_jtag_ongoing9 = 1'd0;
reg  jtagbone_phy_jtag_ongoing10 = 1'd0;
reg  jtagbone_phy_jtag_ongoing11 = 1'd0;
reg  jtagbone_phy_jtag_ongoing12 = 1'd0;
reg  jtagbone_phy_jtag_ongoing13 = 1'd0;
reg  jtagbone_phy_jtag_ongoing14 = 1'd0;
reg  jtagbone_phy_jtag_ongoing15 = 1'd0;
wire jtag_clk;
wire jtag_rst;
wire jtagbone_phy_tx_cdc_sink_valid;
wire jtagbone_phy_tx_cdc_sink_ready;
wire jtagbone_phy_tx_cdc_sink_first;
wire jtagbone_phy_tx_cdc_sink_last;
wire [7:0] jtagbone_phy_tx_cdc_sink_payload_data;
wire jtagbone_phy_tx_cdc_source_valid;
reg  jtagbone_phy_tx_cdc_source_ready = 1'd0;
wire jtagbone_phy_tx_cdc_source_first;
wire jtagbone_phy_tx_cdc_source_last;
wire [7:0] jtagbone_phy_tx_cdc_source_payload_data;
wire jtagbone_phy_tx_cdc_asyncfifo_we;
wire jtagbone_phy_tx_cdc_asyncfifo_writable;
wire jtagbone_phy_tx_cdc_asyncfifo_re;
wire jtagbone_phy_tx_cdc_asyncfifo_readable;
wire [9:0] jtagbone_phy_tx_cdc_asyncfifo_din;
wire [9:0] jtagbone_phy_tx_cdc_asyncfifo_dout;
wire jtagbone_phy_tx_cdc_graycounter0_ce;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter0_q = 3'd0;
wire [2:0] jtagbone_phy_tx_cdc_graycounter0_q_next;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter0_q_next_binary = 3'd0;
wire jtagbone_phy_tx_cdc_graycounter1_ce;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter1_q = 3'd0;
wire [2:0] jtagbone_phy_tx_cdc_graycounter1_q_next;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] jtagbone_phy_tx_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] jtagbone_phy_tx_cdc_produce_rdomain;
wire [2:0] jtagbone_phy_tx_cdc_consume_wdomain;
wire [1:0] jtagbone_phy_tx_cdc_wrport_adr;
wire [9:0] jtagbone_phy_tx_cdc_wrport_dat_r;
wire jtagbone_phy_tx_cdc_wrport_we;
wire [9:0] jtagbone_phy_tx_cdc_wrport_dat_w;
wire [1:0] jtagbone_phy_tx_cdc_rdport_adr;
wire [9:0] jtagbone_phy_tx_cdc_rdport_dat_r;
wire [7:0] jtagbone_phy_tx_cdc_fifo_in_payload_data;
wire jtagbone_phy_tx_cdc_fifo_in_first;
wire jtagbone_phy_tx_cdc_fifo_in_last;
wire [7:0] jtagbone_phy_tx_cdc_fifo_out_payload_data;
wire jtagbone_phy_tx_cdc_fifo_out_first;
wire jtagbone_phy_tx_cdc_fifo_out_last;
reg  jtagbone_phy_rx_cdc_sink_valid = 1'd0;
wire jtagbone_phy_rx_cdc_sink_ready;
reg  jtagbone_phy_rx_cdc_sink_first = 1'd0;
reg  jtagbone_phy_rx_cdc_sink_last = 1'd0;
reg  [7:0] jtagbone_phy_rx_cdc_sink_payload_data = 8'd0;
wire jtagbone_phy_rx_cdc_source_valid;
wire jtagbone_phy_rx_cdc_source_ready;
wire jtagbone_phy_rx_cdc_source_first;
wire jtagbone_phy_rx_cdc_source_last;
wire [7:0] jtagbone_phy_rx_cdc_source_payload_data;
wire jtagbone_phy_rx_cdc_asyncfifo_we;
wire jtagbone_phy_rx_cdc_asyncfifo_writable;
wire jtagbone_phy_rx_cdc_asyncfifo_re;
wire jtagbone_phy_rx_cdc_asyncfifo_readable;
wire [9:0] jtagbone_phy_rx_cdc_asyncfifo_din;
wire [9:0] jtagbone_phy_rx_cdc_asyncfifo_dout;
wire jtagbone_phy_rx_cdc_graycounter0_ce;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter0_q = 3'd0;
wire [2:0] jtagbone_phy_rx_cdc_graycounter0_q_next;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter0_q_next_binary = 3'd0;
wire jtagbone_phy_rx_cdc_graycounter1_ce;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter1_q = 3'd0;
wire [2:0] jtagbone_phy_rx_cdc_graycounter1_q_next;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] jtagbone_phy_rx_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] jtagbone_phy_rx_cdc_produce_rdomain;
wire [2:0] jtagbone_phy_rx_cdc_consume_wdomain;
wire [1:0] jtagbone_phy_rx_cdc_wrport_adr;
wire [9:0] jtagbone_phy_rx_cdc_wrport_dat_r;
wire jtagbone_phy_rx_cdc_wrport_we;
wire [9:0] jtagbone_phy_rx_cdc_wrport_dat_w;
wire [1:0] jtagbone_phy_rx_cdc_rdport_adr;
wire [9:0] jtagbone_phy_rx_cdc_rdport_dat_r;
wire [7:0] jtagbone_phy_rx_cdc_fifo_in_payload_data;
wire jtagbone_phy_rx_cdc_fifo_in_first;
wire jtagbone_phy_rx_cdc_fifo_in_last;
wire [7:0] jtagbone_phy_rx_cdc_fifo_out_payload_data;
wire jtagbone_phy_rx_cdc_fifo_out_first;
wire jtagbone_phy_rx_cdc_fifo_out_last;
reg  jtagbone_phy_valid = 1'd0;
reg  jtagbone_phy_ready = 1'd0;
reg  [7:0] jtagbone_phy_data = 8'd0;
reg  [2:0] jtagbone_phy_count = 3'd0;
wire jtagbone_phy_fsm_reset;
wire [31:0] jtagbone_wishbone_adr;
wire [31:0] jtagbone_wishbone_dat_w;
wire [31:0] jtagbone_wishbone_dat_r;
wire [3:0] jtagbone_wishbone_sel;
reg  jtagbone_wishbone_cyc = 1'd0;
reg  jtagbone_wishbone_stb = 1'd0;
wire jtagbone_wishbone_ack;
reg  jtagbone_wishbone_we = 1'd0;
reg  [2:0] jtagbone_wishbone_cti = 3'd0;
reg  [1:0] jtagbone_wishbone_bte = 2'd0;
wire jtagbone_wishbone_err;
reg  [7:0] jtagbone_cmd = 8'd0;
reg  jtagbone_incr = 1'd0;
reg  [7:0] jtagbone_length = 8'd0;
reg  [31:0] jtagbone_address = 32'd0;
reg  [31:0] jtagbone_data = 32'd0;
reg  [1:0] jtagbone_data_bytes_count = 2'd0;
reg  [1:0] jtagbone_addr_bytes_count = 2'd0;
reg  [7:0] jtagbone_words_count = 8'd0;
wire jtagbone_reset;
wire jtagbone_wait;
wire jtagbone_done;
reg  [22:0] jtagbone_count = 23'd5000000;
reg  jtagbone_is_ongoing = 1'd0;
reg  [9:0] storage = 10'd0;
reg  re = 1'd0;
reg  [9:0] chaser = 10'd0;
reg  mode = 1'd0;
wire wait_1;
wire done;
reg  [21:0] count = 22'd2500000;
wire record0_tx;
reg  record0_rx = 1'd0;
wire record1_tx;
reg  record1_rx = 1'd0;
wire sel;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
reg  adr_burst = 1'd0;
wire [9:0] adr;
wire [31:0] dat_r;
reg  [3:0] we = 4'd0;
wire [31:0] dat_w;
wire [29:0] interface0_mmap_wb_adr;
wire [31:0] interface0_mmap_wb_dat_w;
wire [31:0] interface0_mmap_wb_dat_r;
wire [3:0] interface0_mmap_wb_sel;
wire interface0_mmap_wb_cyc;
wire interface0_mmap_wb_stb;
wire interface0_mmap_wb_ack;
wire interface0_mmap_wb_we;
wire [2:0] interface0_mmap_wb_cti;
wire [1:0] interface0_mmap_wb_bte;
wire interface0_mmap_wb_err;
wire [29:0] interface1_mmap_wb_adr;
wire [31:0] interface1_mmap_wb_dat_w;
wire [31:0] interface1_mmap_wb_dat_r;
wire [3:0] interface1_mmap_wb_sel;
wire interface1_mmap_wb_cyc;
wire interface1_mmap_wb_stb;
wire interface1_mmap_wb_ack;
wire interface1_mmap_wb_we;
wire [2:0] interface1_mmap_wb_cti;
wire [1:0] interface1_mmap_wb_bte;
wire interface1_mmap_wb_err;
reg  [3:0] subfragments_alterajtag_state = 4'd0;
reg  [3:0] subfragments_alterajtag_next_state = 4'd0;
reg  [1:0] subfragments_resetinserter_state = 2'd0;
reg  [1:0] subfragments_resetinserter_next_state = 2'd0;
reg  jtagbone_phy_valid_jtagphy_next_value0 = 1'd0;
reg  jtagbone_phy_valid_jtagphy_next_value_ce0 = 1'd0;
reg  [7:0] jtagbone_phy_data_jtagphy_next_value1 = 8'd0;
reg  jtagbone_phy_data_jtagphy_next_value_ce1 = 1'd0;
reg  [2:0] jtagbone_phy_count_jtagphy_next_value2 = 3'd0;
reg  jtagbone_phy_count_jtagphy_next_value_ce2 = 1'd0;
reg  jtagbone_phy_ready_jtagphy_next_value3 = 1'd0;
reg  jtagbone_phy_ready_jtagphy_next_value_ce3 = 1'd0;
reg  [2:0] subfragments_state = 3'd0;
reg  [2:0] subfragments_next_state = 3'd0;
reg  [1:0] jtagbone_data_bytes_count_uartbone_next_value0 = 2'd0;
reg  jtagbone_data_bytes_count_uartbone_next_value_ce0 = 1'd0;
reg  [1:0] jtagbone_addr_bytes_count_uartbone_next_value1 = 2'd0;
reg  jtagbone_addr_bytes_count_uartbone_next_value_ce1 = 1'd0;
reg  [7:0] jtagbone_words_count_uartbone_next_value2 = 8'd0;
reg  jtagbone_words_count_uartbone_next_value_ce2 = 1'd0;
reg  [7:0] jtagbone_cmd_uartbone_next_value3 = 8'd0;
reg  jtagbone_cmd_uartbone_next_value_ce3 = 1'd0;
reg  [7:0] jtagbone_length_uartbone_next_value4 = 8'd0;
reg  jtagbone_length_uartbone_next_value_ce4 = 1'd0;
reg  [31:0] jtagbone_address_uartbone_next_value5 = 32'd0;
reg  jtagbone_address_uartbone_next_value_ce5 = 1'd0;
reg  jtagbone_incr_uartbone_next_value6 = 1'd0;
reg  jtagbone_incr_uartbone_next_value_ce6 = 1'd0;
reg  [31:0] jtagbone_data_uartbone_next_value7 = 32'd0;
reg  jtagbone_data_uartbone_next_value_ce7 = 1'd0;
reg  [13:0] basesoc_basesoc_adr = 14'd0;
reg  basesoc_basesoc_we = 1'd0;
reg  [31:0] basesoc_basesoc_dat_w = 32'd0;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_basesoc_wishbone_adr;
wire [31:0] basesoc_basesoc_wishbone_dat_w;
reg  [31:0] basesoc_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_basesoc_wishbone_sel;
wire basesoc_basesoc_wishbone_cyc;
wire basesoc_basesoc_wishbone_stb;
reg  basesoc_basesoc_wishbone_ack = 1'd0;
wire basesoc_basesoc_wishbone_we;
wire [2:0] basesoc_basesoc_wishbone_cti;
wire [1:0] basesoc_basesoc_wishbone_bte;
reg  basesoc_basesoc_wishbone_err = 1'd0;
wire [29:0] basesoc_shared_adr;
wire [31:0] basesoc_shared_dat_w;
reg  [31:0] basesoc_shared_dat_r = 32'd0;
wire [3:0] basesoc_shared_sel;
wire basesoc_shared_cyc;
wire basesoc_shared_stb;
reg  basesoc_shared_ack = 1'd0;
wire basesoc_shared_we;
wire [2:0] basesoc_shared_cti;
wire [1:0] basesoc_shared_bte;
wire basesoc_shared_err;
wire [2:0] basesoc_request;
reg  [1:0] basesoc_grant = 2'd0;
reg  [1:0] basesoc_slave_sel = 2'd0;
reg  [1:0] basesoc_slave_sel_r = 2'd0;
reg  basesoc_error = 1'd0;
wire basesoc_wait;
wire basesoc_done;
reg  [19:0] basesoc_count = 20'd1000000;
wire [13:0] basesoc_csr_bankarray_interface0_bank_bus_adr;
wire basesoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank0_reset0_r;
reg  basesoc_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank0_reset0_w;
reg  basesoc_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_scratch0_r;
reg  basesoc_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_scratch0_w;
reg  basesoc_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_bus_errors_r;
reg  basesoc_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_bus_errors_w;
wire basesoc_csr_bankarray_csrbank0_sel;
wire [13:0] basesoc_csr_bankarray_sram_bus_adr;
wire basesoc_csr_bankarray_sram_bus_we;
wire [31:0] basesoc_csr_bankarray_sram_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] basesoc_csr_bankarray_adr;
wire [7:0] basesoc_csr_bankarray_dat_r;
wire basesoc_csr_bankarray_sel;
reg  basesoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] basesoc_csr_bankarray_interface1_bank_bus_adr;
wire basesoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank1_out0_re = 1'd0;
wire [9:0] basesoc_csr_bankarray_csrbank1_out0_r;
reg  basesoc_csr_bankarray_csrbank1_out0_we = 1'd0;
wire [9:0] basesoc_csr_bankarray_csrbank1_out0_w;
wire basesoc_csr_bankarray_csrbank1_sel;
wire [13:0] basesoc_csr_interconnect_adr;
wire basesoc_csr_interconnect_we;
wire [31:0] basesoc_csr_interconnect_dat_w;
wire [31:0] basesoc_csr_interconnect_dat_r;
reg  basesoc_state = 1'd0;
reg  basesoc_next_state = 1'd0;
reg  [31:0] array_muxed0 = 32'd0;
reg  [31:0] array_muxed1 = 32'd0;
reg  [3:0] array_muxed2 = 4'd0;
reg  array_muxed3 = 1'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  [2:0] array_muxed6 = 3'd0;
reg  [1:0] array_muxed7 = 2'd0;
wire rst_meta;
reg  [2:0] multiregimpl0_regs0 = 3'd0;
reg  [2:0] multiregimpl0_regs1 = 3'd0;
reg  [2:0] multiregimpl1_regs0 = 3'd0;
reg  [2:0] multiregimpl1_regs1 = 3'd0;
reg  [2:0] multiregimpl2_regs0 = 3'd0;
reg  [2:0] multiregimpl2_regs1 = 3'd0;
reg  [2:0] multiregimpl3_regs0 = 3'd0;
reg  [2:0] multiregimpl3_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sel = user_sw0;
always @(*) begin
	crg_rst0 <= 1'd0;
	if (soc_rst) begin
		crg_rst0 <= 1'd1;
	end
end
assign bus_error = basesoc_error;
assign bus_errors_status = bus_errors;
assign jtag_clk = jtagbone_phy_jtag_tck;
assign jtagbone_phy_tx_cdc_sink_valid = jtagbone_phy_sink_sink_valid;
assign jtagbone_phy_sink_sink_ready = jtagbone_phy_tx_cdc_sink_ready;
assign jtagbone_phy_tx_cdc_sink_first = jtagbone_phy_sink_sink_first;
assign jtagbone_phy_tx_cdc_sink_last = jtagbone_phy_sink_sink_last;
assign jtagbone_phy_tx_cdc_sink_payload_data = jtagbone_phy_sink_sink_payload_data;
assign jtagbone_phy_source_source_valid = jtagbone_phy_rx_cdc_source_valid;
assign jtagbone_phy_rx_cdc_source_ready = jtagbone_phy_source_source_ready;
assign jtagbone_phy_source_source_first = jtagbone_phy_rx_cdc_source_first;
assign jtagbone_phy_source_source_last = jtagbone_phy_rx_cdc_source_last;
assign jtagbone_phy_source_source_payload_data = jtagbone_phy_rx_cdc_source_payload_data;
assign jtagbone_phy_fsm_reset = (jtagbone_phy_jtag_reset | jtagbone_phy_jtag_capture);
assign jtag_inv_clk = (~jtag_clk);
assign jtag_inv_rst = jtag_rst;
assign jtagbone_phy_jtag_altera_reserved_tms = altera_reserved_tms;
assign jtagbone_phy_jtag_altera_reserved_tck = altera_reserved_tck;
assign jtagbone_phy_jtag_altera_reserved_tdi = altera_reserved_tdi;
assign altera_reserved_tdo = jtagbone_phy_jtag_altera_reserved_tdo;
assign jtagbone_phy_jtag_tck = jtagbone_phy_jtag_tckutap;
assign jtagbone_phy_jtag_tms = jtagbone_phy_jtag_tmsutap;
assign jtagbone_phy_jtag_tdi = jtagbone_phy_jtag_tdiutap;
always @(*) begin
	jtagbone_phy_jtag_ongoing0 <= 1'd0;
	jtagbone_phy_jtag_ongoing13 <= 1'd0;
	jtagbone_phy_jtag_ongoing1 <= 1'd0;
	jtagbone_phy_jtag_ongoing14 <= 1'd0;
	jtagbone_phy_jtag_ongoing2 <= 1'd0;
	jtagbone_phy_jtag_ongoing15 <= 1'd0;
	jtagbone_phy_jtag_ongoing3 <= 1'd0;
	jtagbone_phy_jtag_ongoing4 <= 1'd0;
	jtagbone_phy_jtag_ongoing5 <= 1'd0;
	jtagbone_phy_jtag_ongoing6 <= 1'd0;
	jtagbone_phy_jtag_ongoing7 <= 1'd0;
	jtagbone_phy_jtag_ongoing8 <= 1'd0;
	jtagbone_phy_jtag_ongoing9 <= 1'd0;
	subfragments_alterajtag_next_state <= 4'd0;
	jtagbone_phy_jtag_ongoing10 <= 1'd0;
	jtagbone_phy_jtag_ongoing11 <= 1'd0;
	jtagbone_phy_jtag_ongoing12 <= 1'd0;
	subfragments_alterajtag_next_state <= subfragments_alterajtag_state;
	case (subfragments_alterajtag_state)
		1'd1: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 1'd1;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 2'd2;
				end
			endcase
			jtagbone_phy_jtag_ongoing1 <= 1'd1;
		end
		2'd2: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 2'd3;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd9;
				end
			endcase
			jtagbone_phy_jtag_ongoing2 <= 1'd1;
		end
		2'd3: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 3'd4;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 3'd5;
				end
			endcase
			jtagbone_phy_jtag_ongoing3 <= 1'd1;
		end
		3'd4: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 3'd4;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 3'd5;
				end
			endcase
			jtagbone_phy_jtag_ongoing4 <= 1'd1;
		end
		3'd5: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 3'd6;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd8;
				end
			endcase
			jtagbone_phy_jtag_ongoing5 <= 1'd1;
		end
		3'd6: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 3'd6;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 3'd7;
				end
			endcase
			jtagbone_phy_jtag_ongoing6 <= 1'd1;
		end
		3'd7: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 3'd4;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd8;
				end
			endcase
			jtagbone_phy_jtag_ongoing7 <= 1'd1;
		end
		4'd8: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 1'd1;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 2'd2;
				end
			endcase
			jtagbone_phy_jtag_ongoing8 <= 1'd1;
		end
		4'd9: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd10;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 1'd0;
				end
			endcase
			jtagbone_phy_jtag_ongoing9 <= 1'd1;
		end
		4'd10: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd11;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd12;
				end
			endcase
			jtagbone_phy_jtag_ongoing10 <= 1'd1;
		end
		4'd11: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd11;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd12;
				end
			endcase
			jtagbone_phy_jtag_ongoing11 <= 1'd1;
		end
		4'd12: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd13;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd15;
				end
			endcase
			jtagbone_phy_jtag_ongoing12 <= 1'd1;
		end
		4'd13: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd13;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd14;
				end
			endcase
			jtagbone_phy_jtag_ongoing13 <= 1'd1;
		end
		4'd14: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 4'd11;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 4'd15;
				end
			endcase
			jtagbone_phy_jtag_ongoing14 <= 1'd1;
		end
		4'd15: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 1'd1;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 2'd2;
				end
			endcase
			jtagbone_phy_jtag_ongoing15 <= 1'd1;
		end
		default: begin
			case (jtagbone_phy_jtag_tms)
				1'd0: begin
					subfragments_alterajtag_next_state <= 1'd1;
				end
				1'd1: begin
					subfragments_alterajtag_next_state <= 1'd0;
				end
			endcase
			jtagbone_phy_jtag_ongoing0 <= 1'd1;
		end
	endcase
end
assign jtagbone_phy_tx_cdc_asyncfifo_din = {jtagbone_phy_tx_cdc_fifo_in_last, jtagbone_phy_tx_cdc_fifo_in_first, jtagbone_phy_tx_cdc_fifo_in_payload_data};
assign {jtagbone_phy_tx_cdc_fifo_out_last, jtagbone_phy_tx_cdc_fifo_out_first, jtagbone_phy_tx_cdc_fifo_out_payload_data} = jtagbone_phy_tx_cdc_asyncfifo_dout;
assign jtagbone_phy_tx_cdc_sink_ready = jtagbone_phy_tx_cdc_asyncfifo_writable;
assign jtagbone_phy_tx_cdc_asyncfifo_we = jtagbone_phy_tx_cdc_sink_valid;
assign jtagbone_phy_tx_cdc_fifo_in_first = jtagbone_phy_tx_cdc_sink_first;
assign jtagbone_phy_tx_cdc_fifo_in_last = jtagbone_phy_tx_cdc_sink_last;
assign jtagbone_phy_tx_cdc_fifo_in_payload_data = jtagbone_phy_tx_cdc_sink_payload_data;
assign jtagbone_phy_tx_cdc_source_valid = jtagbone_phy_tx_cdc_asyncfifo_readable;
assign jtagbone_phy_tx_cdc_source_first = jtagbone_phy_tx_cdc_fifo_out_first;
assign jtagbone_phy_tx_cdc_source_last = jtagbone_phy_tx_cdc_fifo_out_last;
assign jtagbone_phy_tx_cdc_source_payload_data = jtagbone_phy_tx_cdc_fifo_out_payload_data;
assign jtagbone_phy_tx_cdc_asyncfifo_re = jtagbone_phy_tx_cdc_source_ready;
assign jtagbone_phy_tx_cdc_graycounter0_ce = (jtagbone_phy_tx_cdc_asyncfifo_writable & jtagbone_phy_tx_cdc_asyncfifo_we);
assign jtagbone_phy_tx_cdc_graycounter1_ce = (jtagbone_phy_tx_cdc_asyncfifo_readable & jtagbone_phy_tx_cdc_asyncfifo_re);
assign jtagbone_phy_tx_cdc_asyncfifo_writable = (((jtagbone_phy_tx_cdc_graycounter0_q[2] == jtagbone_phy_tx_cdc_consume_wdomain[2]) | (jtagbone_phy_tx_cdc_graycounter0_q[1] == jtagbone_phy_tx_cdc_consume_wdomain[1])) | (jtagbone_phy_tx_cdc_graycounter0_q[0] != jtagbone_phy_tx_cdc_consume_wdomain[0]));
assign jtagbone_phy_tx_cdc_asyncfifo_readable = (jtagbone_phy_tx_cdc_graycounter1_q != jtagbone_phy_tx_cdc_produce_rdomain);
assign jtagbone_phy_tx_cdc_wrport_adr = jtagbone_phy_tx_cdc_graycounter0_q_binary[1:0];
assign jtagbone_phy_tx_cdc_wrport_dat_w = jtagbone_phy_tx_cdc_asyncfifo_din;
assign jtagbone_phy_tx_cdc_wrport_we = jtagbone_phy_tx_cdc_graycounter0_ce;
assign jtagbone_phy_tx_cdc_rdport_adr = jtagbone_phy_tx_cdc_graycounter1_q_next_binary[1:0];
assign jtagbone_phy_tx_cdc_asyncfifo_dout = jtagbone_phy_tx_cdc_rdport_dat_r;
always @(*) begin
	jtagbone_phy_tx_cdc_graycounter0_q_next_binary <= 3'd0;
	if (jtagbone_phy_tx_cdc_graycounter0_ce) begin
		jtagbone_phy_tx_cdc_graycounter0_q_next_binary <= (jtagbone_phy_tx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		jtagbone_phy_tx_cdc_graycounter0_q_next_binary <= jtagbone_phy_tx_cdc_graycounter0_q_binary;
	end
end
assign jtagbone_phy_tx_cdc_graycounter0_q_next = (jtagbone_phy_tx_cdc_graycounter0_q_next_binary ^ jtagbone_phy_tx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	jtagbone_phy_tx_cdc_graycounter1_q_next_binary <= 3'd0;
	if (jtagbone_phy_tx_cdc_graycounter1_ce) begin
		jtagbone_phy_tx_cdc_graycounter1_q_next_binary <= (jtagbone_phy_tx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		jtagbone_phy_tx_cdc_graycounter1_q_next_binary <= jtagbone_phy_tx_cdc_graycounter1_q_binary;
	end
end
assign jtagbone_phy_tx_cdc_graycounter1_q_next = (jtagbone_phy_tx_cdc_graycounter1_q_next_binary ^ jtagbone_phy_tx_cdc_graycounter1_q_next_binary[2:1]);
assign jtagbone_phy_rx_cdc_asyncfifo_din = {jtagbone_phy_rx_cdc_fifo_in_last, jtagbone_phy_rx_cdc_fifo_in_first, jtagbone_phy_rx_cdc_fifo_in_payload_data};
assign {jtagbone_phy_rx_cdc_fifo_out_last, jtagbone_phy_rx_cdc_fifo_out_first, jtagbone_phy_rx_cdc_fifo_out_payload_data} = jtagbone_phy_rx_cdc_asyncfifo_dout;
assign jtagbone_phy_rx_cdc_sink_ready = jtagbone_phy_rx_cdc_asyncfifo_writable;
assign jtagbone_phy_rx_cdc_asyncfifo_we = jtagbone_phy_rx_cdc_sink_valid;
assign jtagbone_phy_rx_cdc_fifo_in_first = jtagbone_phy_rx_cdc_sink_first;
assign jtagbone_phy_rx_cdc_fifo_in_last = jtagbone_phy_rx_cdc_sink_last;
assign jtagbone_phy_rx_cdc_fifo_in_payload_data = jtagbone_phy_rx_cdc_sink_payload_data;
assign jtagbone_phy_rx_cdc_source_valid = jtagbone_phy_rx_cdc_asyncfifo_readable;
assign jtagbone_phy_rx_cdc_source_first = jtagbone_phy_rx_cdc_fifo_out_first;
assign jtagbone_phy_rx_cdc_source_last = jtagbone_phy_rx_cdc_fifo_out_last;
assign jtagbone_phy_rx_cdc_source_payload_data = jtagbone_phy_rx_cdc_fifo_out_payload_data;
assign jtagbone_phy_rx_cdc_asyncfifo_re = jtagbone_phy_rx_cdc_source_ready;
assign jtagbone_phy_rx_cdc_graycounter0_ce = (jtagbone_phy_rx_cdc_asyncfifo_writable & jtagbone_phy_rx_cdc_asyncfifo_we);
assign jtagbone_phy_rx_cdc_graycounter1_ce = (jtagbone_phy_rx_cdc_asyncfifo_readable & jtagbone_phy_rx_cdc_asyncfifo_re);
assign jtagbone_phy_rx_cdc_asyncfifo_writable = (((jtagbone_phy_rx_cdc_graycounter0_q[2] == jtagbone_phy_rx_cdc_consume_wdomain[2]) | (jtagbone_phy_rx_cdc_graycounter0_q[1] == jtagbone_phy_rx_cdc_consume_wdomain[1])) | (jtagbone_phy_rx_cdc_graycounter0_q[0] != jtagbone_phy_rx_cdc_consume_wdomain[0]));
assign jtagbone_phy_rx_cdc_asyncfifo_readable = (jtagbone_phy_rx_cdc_graycounter1_q != jtagbone_phy_rx_cdc_produce_rdomain);
assign jtagbone_phy_rx_cdc_wrport_adr = jtagbone_phy_rx_cdc_graycounter0_q_binary[1:0];
assign jtagbone_phy_rx_cdc_wrport_dat_w = jtagbone_phy_rx_cdc_asyncfifo_din;
assign jtagbone_phy_rx_cdc_wrport_we = jtagbone_phy_rx_cdc_graycounter0_ce;
assign jtagbone_phy_rx_cdc_rdport_adr = jtagbone_phy_rx_cdc_graycounter1_q_next_binary[1:0];
assign jtagbone_phy_rx_cdc_asyncfifo_dout = jtagbone_phy_rx_cdc_rdport_dat_r;
always @(*) begin
	jtagbone_phy_rx_cdc_graycounter0_q_next_binary <= 3'd0;
	if (jtagbone_phy_rx_cdc_graycounter0_ce) begin
		jtagbone_phy_rx_cdc_graycounter0_q_next_binary <= (jtagbone_phy_rx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		jtagbone_phy_rx_cdc_graycounter0_q_next_binary <= jtagbone_phy_rx_cdc_graycounter0_q_binary;
	end
end
assign jtagbone_phy_rx_cdc_graycounter0_q_next = (jtagbone_phy_rx_cdc_graycounter0_q_next_binary ^ jtagbone_phy_rx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	jtagbone_phy_rx_cdc_graycounter1_q_next_binary <= 3'd0;
	if (jtagbone_phy_rx_cdc_graycounter1_ce) begin
		jtagbone_phy_rx_cdc_graycounter1_q_next_binary <= (jtagbone_phy_rx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		jtagbone_phy_rx_cdc_graycounter1_q_next_binary <= jtagbone_phy_rx_cdc_graycounter1_q_binary;
	end
end
assign jtagbone_phy_rx_cdc_graycounter1_q_next = (jtagbone_phy_rx_cdc_graycounter1_q_next_binary ^ jtagbone_phy_rx_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
	jtagbone_phy_tx_cdc_source_ready <= 1'd0;
	jtagbone_phy_jtag_tdo <= 1'd0;
	subfragments_resetinserter_next_state <= 2'd0;
	jtagbone_phy_rx_cdc_sink_valid <= 1'd0;
	jtagbone_phy_valid_jtagphy_next_value0 <= 1'd0;
	jtagbone_phy_valid_jtagphy_next_value_ce0 <= 1'd0;
	jtagbone_phy_data_jtagphy_next_value1 <= 8'd0;
	jtagbone_phy_data_jtagphy_next_value_ce1 <= 1'd0;
	jtagbone_phy_rx_cdc_sink_payload_data <= 8'd0;
	jtagbone_phy_count_jtagphy_next_value2 <= 3'd0;
	jtagbone_phy_count_jtagphy_next_value_ce2 <= 1'd0;
	jtagbone_phy_ready_jtagphy_next_value3 <= 1'd0;
	jtagbone_phy_ready_jtagphy_next_value_ce3 <= 1'd0;
	subfragments_resetinserter_next_state <= subfragments_resetinserter_state;
	case (subfragments_resetinserter_state)
		1'd1: begin
			jtagbone_phy_jtag_tdo <= jtagbone_phy_data;
			if (jtagbone_phy_jtag_shift) begin
				jtagbone_phy_count_jtagphy_next_value2 <= (jtagbone_phy_count + 1'd1);
				jtagbone_phy_count_jtagphy_next_value_ce2 <= 1'd1;
				jtagbone_phy_data_jtagphy_next_value1 <= {jtagbone_phy_jtag_tdi, jtagbone_phy_data[7:1]};
				jtagbone_phy_data_jtagphy_next_value_ce1 <= 1'd1;
				if ((jtagbone_phy_count == 3'd7)) begin
					subfragments_resetinserter_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			jtagbone_phy_jtag_tdo <= jtagbone_phy_valid;
			if (jtagbone_phy_jtag_shift) begin
				jtagbone_phy_rx_cdc_sink_valid <= jtagbone_phy_jtag_tdi;
				jtagbone_phy_rx_cdc_sink_payload_data <= jtagbone_phy_data;
				jtagbone_phy_ready_jtagphy_next_value3 <= jtagbone_phy_rx_cdc_sink_ready;
				jtagbone_phy_ready_jtagphy_next_value_ce3 <= 1'd1;
				subfragments_resetinserter_next_state <= 1'd0;
			end
		end
		default: begin
			jtagbone_phy_jtag_tdo <= jtagbone_phy_ready;
			if (jtagbone_phy_jtag_shift) begin
				jtagbone_phy_tx_cdc_source_ready <= jtagbone_phy_jtag_tdi;
				jtagbone_phy_valid_jtagphy_next_value0 <= jtagbone_phy_tx_cdc_source_valid;
				jtagbone_phy_valid_jtagphy_next_value_ce0 <= 1'd1;
				jtagbone_phy_data_jtagphy_next_value1 <= jtagbone_phy_tx_cdc_source_payload_data;
				jtagbone_phy_data_jtagphy_next_value_ce1 <= 1'd1;
				jtagbone_phy_count_jtagphy_next_value2 <= 1'd0;
				jtagbone_phy_count_jtagphy_next_value_ce2 <= 1'd1;
				subfragments_resetinserter_next_state <= 1'd1;
			end
		end
	endcase
end
assign jtagbone_wait = (~jtagbone_is_ongoing);
assign jtagbone_reset = jtagbone_done;
assign jtagbone_wishbone_adr = jtagbone_address;
assign jtagbone_wishbone_dat_w = jtagbone_data;
assign jtagbone_wishbone_sel = 4'd15;
always @(*) begin
	jtagbone_phy_sink_sink_payload_data <= 8'd0;
	case (jtagbone_data_bytes_count)
		1'd0: begin
			jtagbone_phy_sink_sink_payload_data <= jtagbone_data[31:24];
		end
		1'd1: begin
			jtagbone_phy_sink_sink_payload_data <= jtagbone_data[31:16];
		end
		2'd2: begin
			jtagbone_phy_sink_sink_payload_data <= jtagbone_data[31:8];
		end
		2'd3: begin
			jtagbone_phy_sink_sink_payload_data <= jtagbone_data[31:0];
		end
	endcase
end
assign jtagbone_phy_sink_sink_last = ((jtagbone_data_bytes_count == 2'd3) & (jtagbone_words_count == (jtagbone_length - 1'd1)));
always @(*) begin
	jtagbone_data_uartbone_next_value7 <= 32'd0;
	jtagbone_is_ongoing <= 1'd0;
	jtagbone_data_uartbone_next_value_ce7 <= 1'd0;
	subfragments_next_state <= 3'd0;
	jtagbone_data_bytes_count_uartbone_next_value0 <= 2'd0;
	jtagbone_data_bytes_count_uartbone_next_value_ce0 <= 1'd0;
	jtagbone_wishbone_cyc <= 1'd0;
	jtagbone_addr_bytes_count_uartbone_next_value1 <= 2'd0;
	jtagbone_wishbone_stb <= 1'd0;
	jtagbone_addr_bytes_count_uartbone_next_value_ce1 <= 1'd0;
	jtagbone_wishbone_we <= 1'd0;
	jtagbone_words_count_uartbone_next_value2 <= 8'd0;
	jtagbone_words_count_uartbone_next_value_ce2 <= 1'd0;
	jtagbone_cmd_uartbone_next_value3 <= 8'd0;
	jtagbone_cmd_uartbone_next_value_ce3 <= 1'd0;
	jtagbone_length_uartbone_next_value4 <= 8'd0;
	jtagbone_length_uartbone_next_value_ce4 <= 1'd0;
	jtagbone_address_uartbone_next_value5 <= 32'd0;
	jtagbone_address_uartbone_next_value_ce5 <= 1'd0;
	jtagbone_phy_sink_sink_valid <= 1'd0;
	jtagbone_incr_uartbone_next_value6 <= 1'd0;
	jtagbone_incr_uartbone_next_value_ce6 <= 1'd0;
	jtagbone_phy_source_source_ready <= 1'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			jtagbone_phy_source_source_ready <= 1'd1;
			if (jtagbone_phy_source_source_valid) begin
				jtagbone_length_uartbone_next_value4 <= jtagbone_phy_source_source_payload_data;
				jtagbone_length_uartbone_next_value_ce4 <= 1'd1;
				subfragments_next_state <= 2'd2;
			end
		end
		2'd2: begin
			jtagbone_phy_source_source_ready <= 1'd1;
			if (jtagbone_phy_source_source_valid) begin
				jtagbone_address_uartbone_next_value5 <= {jtagbone_address, jtagbone_phy_source_source_payload_data};
				jtagbone_address_uartbone_next_value_ce5 <= 1'd1;
				jtagbone_addr_bytes_count_uartbone_next_value1 <= (jtagbone_addr_bytes_count + 1'd1);
				jtagbone_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
				if ((jtagbone_addr_bytes_count == 2'd3)) begin
					if (((jtagbone_cmd == 1'd1) | (jtagbone_cmd == 2'd3))) begin
						jtagbone_incr_uartbone_next_value6 <= (jtagbone_cmd == 1'd1);
						jtagbone_incr_uartbone_next_value_ce6 <= 1'd1;
						subfragments_next_state <= 2'd3;
					end else begin
						if (((jtagbone_cmd == 2'd2) | (jtagbone_cmd == 3'd4))) begin
							jtagbone_incr_uartbone_next_value6 <= (jtagbone_cmd == 2'd2);
							jtagbone_incr_uartbone_next_value_ce6 <= 1'd1;
							subfragments_next_state <= 3'd5;
						end else begin
							subfragments_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			jtagbone_phy_source_source_ready <= 1'd1;
			if (jtagbone_phy_source_source_valid) begin
				jtagbone_data_uartbone_next_value7 <= {jtagbone_data, jtagbone_phy_source_source_payload_data};
				jtagbone_data_uartbone_next_value_ce7 <= 1'd1;
				jtagbone_data_bytes_count_uartbone_next_value0 <= (jtagbone_data_bytes_count + 1'd1);
				jtagbone_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
				if ((jtagbone_data_bytes_count == 2'd3)) begin
					subfragments_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			jtagbone_phy_source_source_ready <= 1'd0;
			jtagbone_wishbone_stb <= 1'd1;
			jtagbone_wishbone_we <= 1'd1;
			jtagbone_wishbone_cyc <= 1'd1;
			if (jtagbone_wishbone_ack) begin
				jtagbone_words_count_uartbone_next_value2 <= (jtagbone_words_count + 1'd1);
				jtagbone_words_count_uartbone_next_value_ce2 <= 1'd1;
				jtagbone_address_uartbone_next_value5 <= (jtagbone_address + jtagbone_incr);
				jtagbone_address_uartbone_next_value_ce5 <= 1'd1;
				if ((jtagbone_words_count == (jtagbone_length - 1'd1))) begin
					subfragments_next_state <= 1'd0;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		3'd5: begin
			jtagbone_phy_source_source_ready <= 1'd0;
			jtagbone_wishbone_stb <= 1'd1;
			jtagbone_wishbone_we <= 1'd0;
			jtagbone_wishbone_cyc <= 1'd1;
			if (jtagbone_wishbone_ack) begin
				jtagbone_data_uartbone_next_value7 <= jtagbone_wishbone_dat_r;
				jtagbone_data_uartbone_next_value_ce7 <= 1'd1;
				subfragments_next_state <= 3'd6;
			end
		end
		3'd6: begin
			jtagbone_phy_source_source_ready <= 1'd0;
			jtagbone_phy_sink_sink_valid <= 1'd1;
			if (jtagbone_phy_sink_sink_ready) begin
				jtagbone_data_bytes_count_uartbone_next_value0 <= (jtagbone_data_bytes_count + 1'd1);
				jtagbone_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
				if ((jtagbone_data_bytes_count == 2'd3)) begin
					jtagbone_words_count_uartbone_next_value2 <= (jtagbone_words_count + 1'd1);
					jtagbone_words_count_uartbone_next_value_ce2 <= 1'd1;
					jtagbone_address_uartbone_next_value5 <= (jtagbone_address + jtagbone_incr);
					jtagbone_address_uartbone_next_value_ce5 <= 1'd1;
					if ((jtagbone_words_count == (jtagbone_length - 1'd1))) begin
						subfragments_next_state <= 1'd0;
					end else begin
						subfragments_next_state <= 3'd5;
					end
				end
			end
		end
		default: begin
			jtagbone_is_ongoing <= 1'd1;
			jtagbone_phy_source_source_ready <= 1'd1;
			jtagbone_data_bytes_count_uartbone_next_value0 <= 1'd0;
			jtagbone_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
			jtagbone_addr_bytes_count_uartbone_next_value1 <= 1'd0;
			jtagbone_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
			jtagbone_words_count_uartbone_next_value2 <= 1'd0;
			jtagbone_words_count_uartbone_next_value_ce2 <= 1'd1;
			if (jtagbone_phy_source_source_valid) begin
				jtagbone_cmd_uartbone_next_value3 <= jtagbone_phy_source_source_payload_data;
				jtagbone_cmd_uartbone_next_value_ce3 <= 1'd1;
				subfragments_next_state <= 1'd1;
			end
		end
	endcase
end
assign jtagbone_done = (jtagbone_count == 1'd0);
assign wait_1 = (~done);
always @(*) begin
	user_led3 <= 1'd0;
	user_led4 <= 1'd0;
	user_led5 <= 1'd0;
	user_led6 <= 1'd0;
	user_led7 <= 1'd0;
	user_led8 <= 1'd0;
	user_led9 <= 1'd0;
	user_led0 <= 1'd0;
	user_led1 <= 1'd0;
	user_led2 <= 1'd0;
	if ((mode == 1'd1)) begin
		{user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= storage;
	end else begin
		{user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= chaser;
	end
end
assign done = (count == 1'd0);
always @(*) begin
	record0_rx <= 1'd0;
	serial_tx <= 1'd0;
	record1_rx <= 1'd0;
	case (sel)
		1'd0: begin
			serial_tx <= record0_tx;
			record0_rx <= serial_rx;
		end
		1'd1: begin
			serial_tx <= record1_tx;
			record1_rx <= serial_rx;
		end
	endcase
end
always @(*) begin
	we <= 4'd0;
	we[0] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[0]);
	we[1] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[1]);
	we[2] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[2]);
	we[3] <= (((ram_bus_cyc & ram_bus_stb) & ram_bus_we) & ram_bus_sel[3]);
end
assign adr = ram_bus_adr[9:0];
assign ram_bus_dat_r = dat_r;
assign dat_w = ram_bus_dat_w;
always @(*) begin
	basesoc_basesoc_wishbone_dat_r <= 32'd0;
	basesoc_next_state <= 1'd0;
	basesoc_basesoc_adr <= 14'd0;
	basesoc_basesoc_we <= 1'd0;
	basesoc_basesoc_wishbone_ack <= 1'd0;
	basesoc_basesoc_dat_w <= 32'd0;
	basesoc_next_state <= basesoc_state;
	case (basesoc_state)
		1'd1: begin
			basesoc_basesoc_wishbone_ack <= 1'd1;
			basesoc_basesoc_wishbone_dat_r <= basesoc_basesoc_dat_r;
			basesoc_next_state <= 1'd0;
		end
		default: begin
			basesoc_basesoc_dat_w <= basesoc_basesoc_wishbone_dat_w;
			if ((basesoc_basesoc_wishbone_cyc & basesoc_basesoc_wishbone_stb)) begin
				basesoc_basesoc_adr <= basesoc_basesoc_wishbone_adr;
				basesoc_basesoc_we <= (basesoc_basesoc_wishbone_we & (basesoc_basesoc_wishbone_sel != 1'd0));
				basesoc_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_shared_adr = array_muxed0;
assign basesoc_shared_dat_w = array_muxed1;
assign basesoc_shared_sel = array_muxed2;
assign basesoc_shared_cyc = array_muxed3;
assign basesoc_shared_stb = array_muxed4;
assign basesoc_shared_we = array_muxed5;
assign basesoc_shared_cti = array_muxed6;
assign basesoc_shared_bte = array_muxed7;
assign jtagbone_wishbone_dat_r = basesoc_shared_dat_r;
assign interface0_mmap_wb_dat_r = basesoc_shared_dat_r;
assign interface1_mmap_wb_dat_r = basesoc_shared_dat_r;
assign jtagbone_wishbone_ack = (basesoc_shared_ack & (basesoc_grant == 1'd0));
assign interface0_mmap_wb_ack = (basesoc_shared_ack & (basesoc_grant == 1'd1));
assign interface1_mmap_wb_ack = (basesoc_shared_ack & (basesoc_grant == 2'd2));
assign jtagbone_wishbone_err = (basesoc_shared_err & (basesoc_grant == 1'd0));
assign interface0_mmap_wb_err = (basesoc_shared_err & (basesoc_grant == 1'd1));
assign interface1_mmap_wb_err = (basesoc_shared_err & (basesoc_grant == 2'd2));
assign basesoc_request = {interface1_mmap_wb_cyc, interface0_mmap_wb_cyc, jtagbone_wishbone_cyc};
always @(*) begin
	basesoc_slave_sel <= 2'd0;
	basesoc_slave_sel[0] <= (basesoc_shared_adr[29:10] == 1'd0);
	basesoc_slave_sel[1] <= (basesoc_shared_adr[29:14] == 13'd4096);
end
assign ram_bus_adr = basesoc_shared_adr;
assign ram_bus_dat_w = basesoc_shared_dat_w;
assign ram_bus_sel = basesoc_shared_sel;
assign ram_bus_stb = basesoc_shared_stb;
assign ram_bus_we = basesoc_shared_we;
assign ram_bus_cti = basesoc_shared_cti;
assign ram_bus_bte = basesoc_shared_bte;
assign basesoc_basesoc_wishbone_adr = basesoc_shared_adr;
assign basesoc_basesoc_wishbone_dat_w = basesoc_shared_dat_w;
assign basesoc_basesoc_wishbone_sel = basesoc_shared_sel;
assign basesoc_basesoc_wishbone_stb = basesoc_shared_stb;
assign basesoc_basesoc_wishbone_we = basesoc_shared_we;
assign basesoc_basesoc_wishbone_cti = basesoc_shared_cti;
assign basesoc_basesoc_wishbone_bte = basesoc_shared_bte;
assign ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[0]);
assign basesoc_basesoc_wishbone_cyc = (basesoc_shared_cyc & basesoc_slave_sel[1]);
assign basesoc_shared_err = (ram_bus_err | basesoc_basesoc_wishbone_err);
assign basesoc_wait = ((basesoc_shared_stb & basesoc_shared_cyc) & (~basesoc_shared_ack));
always @(*) begin
	basesoc_error <= 1'd0;
	basesoc_shared_dat_r <= 32'd0;
	basesoc_shared_ack <= 1'd0;
	basesoc_shared_ack <= (ram_bus_ack | basesoc_basesoc_wishbone_ack);
	basesoc_shared_dat_r <= (({32{basesoc_slave_sel_r[0]}} & ram_bus_dat_r) | ({32{basesoc_slave_sel_r[1]}} & basesoc_basesoc_wishbone_dat_r));
	if (basesoc_done) begin
		basesoc_shared_dat_r <= 32'd4294967295;
		basesoc_shared_ack <= 1'd1;
		basesoc_error <= 1'd1;
	end
end
assign basesoc_done = (basesoc_count == 1'd0);
assign basesoc_csr_bankarray_csrbank0_sel = (basesoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign basesoc_csr_bankarray_csrbank0_reset0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank0_reset0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_reset0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_scratch0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank0_scratch0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_scratch0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_bus_errors_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank0_bus_errors_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_bus_errors_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign basesoc_csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign basesoc_csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign basesoc_csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = basesoc_csr_bankarray_csrbank0_bus_errors_we;
assign basesoc_csr_bankarray_sel = (basesoc_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	basesoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (basesoc_csr_bankarray_sel_r) begin
		basesoc_csr_bankarray_sram_bus_dat_r <= basesoc_csr_bankarray_dat_r;
	end
end
assign basesoc_csr_bankarray_adr = basesoc_csr_bankarray_sram_bus_adr[5:0];
assign basesoc_csr_bankarray_csrbank1_sel = (basesoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign basesoc_csr_bankarray_csrbank1_out0_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[9:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank1_out0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank1_out0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank1_sel & (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank1_out0_re <= basesoc_csr_bankarray_interface1_bank_bus_we;
		basesoc_csr_bankarray_csrbank1_out0_we <= (~basesoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank1_out0_w = storage[9:0];
assign basesoc_csr_interconnect_adr = basesoc_basesoc_adr;
assign basesoc_csr_interconnect_we = basesoc_basesoc_we;
assign basesoc_csr_interconnect_dat_w = basesoc_basesoc_dat_w;
assign basesoc_basesoc_dat_r = basesoc_csr_interconnect_dat_r;
assign basesoc_csr_bankarray_interface0_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface1_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_sram_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface0_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface1_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_sram_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface0_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface1_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_sram_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_interconnect_dat_r = ((basesoc_csr_bankarray_interface0_bank_bus_dat_r | basesoc_csr_bankarray_interface1_bank_bus_dat_r) | basesoc_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 32'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed0 <= jtagbone_wishbone_adr;
		end
		1'd1: begin
			array_muxed0 <= interface0_mmap_wb_adr;
		end
		default: begin
			array_muxed0 <= interface1_mmap_wb_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed1 <= jtagbone_wishbone_dat_w;
		end
		1'd1: begin
			array_muxed1 <= interface0_mmap_wb_dat_w;
		end
		default: begin
			array_muxed1 <= interface1_mmap_wb_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed2 <= jtagbone_wishbone_sel;
		end
		1'd1: begin
			array_muxed2 <= interface0_mmap_wb_sel;
		end
		default: begin
			array_muxed2 <= interface1_mmap_wb_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed3 <= jtagbone_wishbone_cyc;
		end
		1'd1: begin
			array_muxed3 <= interface0_mmap_wb_cyc;
		end
		default: begin
			array_muxed3 <= interface1_mmap_wb_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed4 <= jtagbone_wishbone_stb;
		end
		1'd1: begin
			array_muxed4 <= interface0_mmap_wb_stb;
		end
		default: begin
			array_muxed4 <= interface1_mmap_wb_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed5 <= jtagbone_wishbone_we;
		end
		1'd1: begin
			array_muxed5 <= interface0_mmap_wb_we;
		end
		default: begin
			array_muxed5 <= interface1_mmap_wb_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed6 <= jtagbone_wishbone_cti;
		end
		1'd1: begin
			array_muxed6 <= interface0_mmap_wb_cti;
		end
		default: begin
			array_muxed6 <= interface1_mmap_wb_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (basesoc_grant)
		1'd0: begin
			array_muxed7 <= jtagbone_wishbone_bte;
		end
		1'd1: begin
			array_muxed7 <= interface0_mmap_wb_bte;
		end
		default: begin
			array_muxed7 <= interface1_mmap_wb_bte;
		end
	endcase
end
assign jtagbone_phy_tx_cdc_produce_rdomain = multiregimpl0_regs1;
assign jtagbone_phy_tx_cdc_consume_wdomain = multiregimpl1_regs1;
assign jtagbone_phy_rx_cdc_produce_rdomain = multiregimpl2_regs1;
assign jtagbone_phy_rx_cdc_consume_wdomain = multiregimpl3_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge jtag_clk) begin
	subfragments_alterajtag_state <= subfragments_alterajtag_next_state;
	jtagbone_phy_tx_cdc_graycounter1_q_binary <= jtagbone_phy_tx_cdc_graycounter1_q_next_binary;
	jtagbone_phy_tx_cdc_graycounter1_q <= jtagbone_phy_tx_cdc_graycounter1_q_next;
	jtagbone_phy_rx_cdc_graycounter0_q_binary <= jtagbone_phy_rx_cdc_graycounter0_q_next_binary;
	jtagbone_phy_rx_cdc_graycounter0_q <= jtagbone_phy_rx_cdc_graycounter0_q_next;
	subfragments_resetinserter_state <= subfragments_resetinserter_next_state;
	if (jtagbone_phy_valid_jtagphy_next_value_ce0) begin
		jtagbone_phy_valid <= jtagbone_phy_valid_jtagphy_next_value0;
	end
	if (jtagbone_phy_data_jtagphy_next_value_ce1) begin
		jtagbone_phy_data <= jtagbone_phy_data_jtagphy_next_value1;
	end
	if (jtagbone_phy_count_jtagphy_next_value_ce2) begin
		jtagbone_phy_count <= jtagbone_phy_count_jtagphy_next_value2;
	end
	if (jtagbone_phy_ready_jtagphy_next_value_ce3) begin
		jtagbone_phy_ready <= jtagbone_phy_ready_jtagphy_next_value3;
	end
	if (jtagbone_phy_fsm_reset) begin
		jtagbone_phy_valid <= 1'd0;
		jtagbone_phy_ready <= 1'd0;
		jtagbone_phy_data <= 8'd0;
		jtagbone_phy_count <= 3'd0;
		subfragments_resetinserter_state <= 2'd0;
	end
	if (jtag_rst) begin
		jtagbone_phy_tx_cdc_graycounter1_q <= 3'd0;
		jtagbone_phy_tx_cdc_graycounter1_q_binary <= 3'd0;
		jtagbone_phy_rx_cdc_graycounter0_q <= 3'd0;
		jtagbone_phy_rx_cdc_graycounter0_q_binary <= 3'd0;
		jtagbone_phy_valid <= 1'd0;
		jtagbone_phy_ready <= 1'd0;
		jtagbone_phy_data <= 8'd0;
		jtagbone_phy_count <= 3'd0;
		subfragments_alterajtag_state <= 4'd0;
		subfragments_resetinserter_state <= 2'd0;
	end
	multiregimpl0_regs0 <= jtagbone_phy_tx_cdc_graycounter0_q;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl3_regs0 <= jtagbone_phy_rx_cdc_graycounter1_q;
	multiregimpl3_regs1 <= multiregimpl3_regs0;
end

always @(posedge jtag_inv_clk) begin
	jtagbone_phy_jtag_reset <= jtagbone_phy_jtag_ongoing0;
	jtagbone_phy_jtag_capture <= jtagbone_phy_jtag_ongoing3;
	jtagbone_phy_jtag_tdouser <= jtagbone_phy_jtag_tdo;
	if (jtag_inv_rst) begin
		jtagbone_phy_jtag_reset <= 1'd0;
		jtagbone_phy_jtag_capture <= 1'd0;
		jtagbone_phy_jtag_tdouser <= 1'd0;
	end
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	jtagbone_phy_tx_cdc_graycounter0_q_binary <= jtagbone_phy_tx_cdc_graycounter0_q_next_binary;
	jtagbone_phy_tx_cdc_graycounter0_q <= jtagbone_phy_tx_cdc_graycounter0_q_next;
	jtagbone_phy_rx_cdc_graycounter1_q_binary <= jtagbone_phy_rx_cdc_graycounter1_q_next_binary;
	jtagbone_phy_rx_cdc_graycounter1_q <= jtagbone_phy_rx_cdc_graycounter1_q_next;
	subfragments_state <= subfragments_next_state;
	if (jtagbone_data_bytes_count_uartbone_next_value_ce0) begin
		jtagbone_data_bytes_count <= jtagbone_data_bytes_count_uartbone_next_value0;
	end
	if (jtagbone_addr_bytes_count_uartbone_next_value_ce1) begin
		jtagbone_addr_bytes_count <= jtagbone_addr_bytes_count_uartbone_next_value1;
	end
	if (jtagbone_words_count_uartbone_next_value_ce2) begin
		jtagbone_words_count <= jtagbone_words_count_uartbone_next_value2;
	end
	if (jtagbone_cmd_uartbone_next_value_ce3) begin
		jtagbone_cmd <= jtagbone_cmd_uartbone_next_value3;
	end
	if (jtagbone_length_uartbone_next_value_ce4) begin
		jtagbone_length <= jtagbone_length_uartbone_next_value4;
	end
	if (jtagbone_address_uartbone_next_value_ce5) begin
		jtagbone_address <= jtagbone_address_uartbone_next_value5;
	end
	if (jtagbone_incr_uartbone_next_value_ce6) begin
		jtagbone_incr <= jtagbone_incr_uartbone_next_value6;
	end
	if (jtagbone_data_uartbone_next_value_ce7) begin
		jtagbone_data <= jtagbone_data_uartbone_next_value7;
	end
	if (jtagbone_reset) begin
		jtagbone_incr <= 1'd0;
		subfragments_state <= 3'd0;
	end
	if (jtagbone_wait) begin
		if ((~jtagbone_done)) begin
			jtagbone_count <= (jtagbone_count - 1'd1);
		end
	end else begin
		jtagbone_count <= 23'd5000000;
	end
	if (done) begin
		chaser <= {chaser, (~chaser[9])};
	end
	if (re) begin
		mode <= 1'd1;
	end
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 22'd2500000;
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
		ram_bus_ack <= 1'd1;
	end
	basesoc_state <= basesoc_next_state;
	case (basesoc_grant)
		1'd0: begin
			if ((~basesoc_request[0])) begin
				if (basesoc_request[1]) begin
					basesoc_grant <= 1'd1;
				end else begin
					if (basesoc_request[2]) begin
						basesoc_grant <= 2'd2;
					end
				end
			end
		end
		1'd1: begin
			if ((~basesoc_request[1])) begin
				if (basesoc_request[2]) begin
					basesoc_grant <= 2'd2;
				end else begin
					if (basesoc_request[0]) begin
						basesoc_grant <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			if ((~basesoc_request[2])) begin
				if (basesoc_request[0]) begin
					basesoc_grant <= 1'd0;
				end else begin
					if (basesoc_request[1]) begin
						basesoc_grant <= 1'd1;
					end
				end
			end
		end
	endcase
	basesoc_slave_sel_r <= basesoc_slave_sel;
	if (basesoc_wait) begin
		if ((~basesoc_done)) begin
			basesoc_count <= (basesoc_count - 1'd1);
		end
	end else begin
		basesoc_count <= 20'd1000000;
	end
	basesoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank0_sel) begin
		case (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank0_reset0_re) begin
		reset_storage[1:0] <= basesoc_csr_bankarray_csrbank0_reset0_r;
	end
	reset_re <= basesoc_csr_bankarray_csrbank0_reset0_re;
	if (basesoc_csr_bankarray_csrbank0_scratch0_re) begin
		scratch_storage[31:0] <= basesoc_csr_bankarray_csrbank0_scratch0_r;
	end
	scratch_re <= basesoc_csr_bankarray_csrbank0_scratch0_re;
	bus_errors_re <= basesoc_csr_bankarray_csrbank0_bus_errors_re;
	basesoc_csr_bankarray_sel_r <= basesoc_csr_bankarray_sel;
	basesoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank1_sel) begin
		case (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_out0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank1_out0_re) begin
		storage[9:0] <= basesoc_csr_bankarray_csrbank1_out0_r;
	end
	re <= basesoc_csr_bankarray_csrbank1_out0_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		jtagbone_phy_tx_cdc_graycounter0_q <= 3'd0;
		jtagbone_phy_tx_cdc_graycounter0_q_binary <= 3'd0;
		jtagbone_phy_rx_cdc_graycounter1_q <= 3'd0;
		jtagbone_phy_rx_cdc_graycounter1_q_binary <= 3'd0;
		jtagbone_incr <= 1'd0;
		jtagbone_count <= 23'd5000000;
		storage <= 10'd0;
		re <= 1'd0;
		chaser <= 10'd0;
		mode <= 1'd0;
		count <= 22'd2500000;
		ram_bus_ack <= 1'd0;
		subfragments_state <= 3'd0;
		basesoc_grant <= 2'd0;
		basesoc_slave_sel_r <= 2'd0;
		basesoc_count <= 20'd1000000;
		basesoc_csr_bankarray_sel_r <= 1'd0;
		basesoc_state <= 1'd0;
	end
	multiregimpl1_regs0 <= jtagbone_phy_tx_cdc_graycounter1_q;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= jtagbone_phy_rx_cdc_graycounter0_q;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 42-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:41];
initial begin
	$readmemh("base_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= basesoc_csr_bankarray_adr;
end
assign basesoc_csr_bankarray_dat_r = mem[mem_adr0];


fiftyfivenm_jtag fiftyfivenm_jtag(
	.tck(jtagbone_phy_jtag_altera_reserved_tck),
	.tdi(jtagbone_phy_jtag_altera_reserved_tdi),
	.tdouser(jtagbone_phy_jtag_tdouser),
	.tms(jtagbone_phy_jtag_altera_reserved_tms),
	.clkdruser(jtagbone_phy_jtag_drck),
	.runidleuser(jtagbone_phy_jtag_runtest),
	.shiftuser(jtagbone_phy_jtag_shift),
	.tckutap(jtagbone_phy_jtag_tckutap),
	.tdiutap(jtagbone_phy_jtag_tdiutap),
	.tdo(jtagbone_phy_jtag_altera_reserved_tdo),
	.tmsutap(jtagbone_phy_jtag_tmsutap),
	.updateuser(jtagbone_phy_jtag_update),
	.usr1user(jtagbone_phy_jtag_sel)
);

//------------------------------------------------------------------------------
// Memory storage_1: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:3];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (jtagbone_phy_tx_cdc_wrport_we)
		storage_1[jtagbone_phy_tx_cdc_wrport_adr] <= jtagbone_phy_tx_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[jtagbone_phy_tx_cdc_wrport_adr];
end
always @(posedge jtag_clk) begin
	storage_1_dat1 <= storage_1[jtagbone_phy_tx_cdc_rdport_adr];
end
assign jtagbone_phy_tx_cdc_wrport_dat_r = storage_1_dat0;
assign jtagbone_phy_tx_cdc_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:3];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge jtag_clk) begin
	if (jtagbone_phy_rx_cdc_wrport_we)
		storage_2[jtagbone_phy_rx_cdc_wrport_adr] <= jtagbone_phy_rx_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[jtagbone_phy_rx_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_2_dat1 <= storage_2[jtagbone_phy_rx_cdc_rdport_adr];
end
assign jtagbone_phy_rx_cdc_wrport_dat_r = storage_2_dat0;
assign jtagbone_phy_rx_cdc_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory shared_ram: 1024-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] shared_ram[0:1023];
initial begin
	$readmemh("base_shared_ram.init", shared_ram);
end
reg [9:0] shared_ram_adr0;
always @(posedge sys_clk) begin
	if (we[0])
		shared_ram[adr][7:0] <= dat_w[7:0];
	if (we[1])
		shared_ram[adr][15:8] <= dat_w[15:8];
	if (we[2])
		shared_ram[adr][23:16] <= dat_w[23:16];
	if (we[3])
		shared_ram[adr][31:24] <= dat_w[31:24];
	shared_ram_adr0 <= adr;
end
assign dat_r = shared_ram[shared_ram_adr0];


femtorv_soc femtorv_soc(
	.clk(sys_clk),
	.mmap_m_ack(interface0_mmap_wb_ack),
	.mmap_m_dat_r(interface0_mmap_wb_dat_r),
	.mmap_m_err(interface0_mmap_wb_err),
	.uart_rx(record0_rx),
	.mmap_m_adr(interface0_mmap_wb_adr[23:0]),
	.mmap_m_bte(interface0_mmap_wb_bte),
	.mmap_m_cti(interface0_mmap_wb_cti),
	.mmap_m_cyc(interface0_mmap_wb_cyc),
	.mmap_m_dat_w(interface0_mmap_wb_dat_w),
	.mmap_m_sel(interface0_mmap_wb_sel),
	.mmap_m_stb(interface0_mmap_wb_stb),
	.mmap_m_we(interface0_mmap_wb_we),
	.uart_tx(record0_tx)
);

firev_soc firev_soc(
	.clk(sys_clk),
	.mmap_m_ack(interface1_mmap_wb_ack),
	.mmap_m_dat_r(interface1_mmap_wb_dat_r),
	.mmap_m_err(interface1_mmap_wb_err),
	.uart_rx(record1_rx),
	.mmap_m_adr(interface1_mmap_wb_adr[23:0]),
	.mmap_m_bte(interface1_mmap_wb_bte),
	.mmap_m_cti(interface1_mmap_wb_cti),
	.mmap_m_cyc(interface1_mmap_wb_cyc),
	.mmap_m_dat_w(interface1_mmap_wb_dat_w),
	.mmap_m_sel(interface1_mmap_wb_sel),
	.mmap_m_stb(interface1_mmap_wb_stb),
	.mmap_m_we(interface1_mmap_wb_we),
	.uart_tx(record1_tx)
);

DFF DFF(
	.clk(jtag_clk),
	.clrn(1'd1),
	.d(1'd0),
	.prn((~sys_rst)),
	.q(rst_meta)
);

DFF DFF_1(
	.clk(jtag_clk),
	.clrn(1'd1),
	.d(rst_meta),
	.prn((~sys_rst)),
	.q(jtag_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-14 10:21:17.
//------------------------------------------------------------------------------
