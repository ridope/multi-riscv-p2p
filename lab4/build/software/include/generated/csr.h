//--------------------------------------------------------------------------------
// Auto-generated by Migen (94db729) & LiteX (3fde2512) on 2022-03-15 18:44:40
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}

/* switches */
#define CSR_SWITCHES_BASE (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_ADDR (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_SIZE 1
static inline uint32_t switches_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}

/* buttons */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_SIZE 1
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}

/* acc */
#define CSR_ACC_BASE (CSR_BASE + 0x1800L)
#define CSR_ACC_CONTROL_ADDR (CSR_BASE + 0x1800L)
#define CSR_ACC_CONTROL_SIZE 1
static inline uint32_t acc_control_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void acc_control_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}
#define CSR_ACC_CONTROL_START_OFFSET 0
#define CSR_ACC_CONTROL_START_SIZE 1
static inline uint32_t acc_control_start_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t acc_control_start_read(void) {
	uint32_t word = acc_control_read();
	return acc_control_start_extract(word);
}
static inline uint32_t acc_control_start_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void acc_control_start_write(uint32_t plain_value) {
	uint32_t oldword = acc_control_read();
	uint32_t newword = acc_control_start_replace(oldword, plain_value);
	acc_control_write(newword);
}
#define CSR_ACC_CONTROL_LENGTH_OFFSET 8
#define CSR_ACC_CONTROL_LENGTH_SIZE 8
static inline uint32_t acc_control_length_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 8)-1);
	return ( (oldword >> 8) & mask );
}
static inline uint32_t acc_control_length_read(void) {
	uint32_t word = acc_control_read();
	return acc_control_length_extract(word);
}
static inline uint32_t acc_control_length_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 8)-1);
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void acc_control_length_write(uint32_t plain_value) {
	uint32_t oldword = acc_control_read();
	uint32_t newword = acc_control_length_replace(oldword, plain_value);
	acc_control_write(newword);
}
#define CSR_ACC_STATUS_ADDR (CSR_BASE + 0x1804L)
#define CSR_ACC_STATUS_SIZE 1
static inline uint32_t acc_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}
#define CSR_ACC_STATUS_DONE_OFFSET 0
#define CSR_ACC_STATUS_DONE_SIZE 1
static inline uint32_t acc_status_done_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t acc_status_done_read(void) {
	uint32_t word = acc_status_read();
	return acc_status_done_extract(word);
}
#define CSR_ACC_MOSI_ADDR (CSR_BASE + 0x1808L)
#define CSR_ACC_MOSI_SIZE 1
static inline uint32_t acc_mosi_read(void) {
	return csr_read_simple(CSR_BASE + 0x1808L);
}
static inline void acc_mosi_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1808L);
}
#define CSR_ACC_MISO_ADDR (CSR_BASE + 0x180cL)
#define CSR_ACC_MISO_SIZE 1
static inline uint32_t acc_miso_read(void) {
	return csr_read_simple(CSR_BASE + 0x180cL);
}
#define CSR_ACC_CS_ADDR (CSR_BASE + 0x1810L)
#define CSR_ACC_CS_SIZE 1
static inline uint32_t acc_cs_read(void) {
	return csr_read_simple(CSR_BASE + 0x1810L);
}
static inline void acc_cs_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1810L);
}
#define CSR_ACC_CS_SEL_OFFSET 0
#define CSR_ACC_CS_SEL_SIZE 1
static inline uint32_t acc_cs_sel_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t acc_cs_sel_read(void) {
	uint32_t word = acc_cs_read();
	return acc_cs_sel_extract(word);
}
static inline uint32_t acc_cs_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void acc_cs_sel_write(uint32_t plain_value) {
	uint32_t oldword = acc_cs_read();
	uint32_t newword = acc_cs_sel_replace(oldword, plain_value);
	acc_cs_write(newword);
}
#define CSR_ACC_CS_MODE_OFFSET 16
#define CSR_ACC_CS_MODE_SIZE 1
static inline uint32_t acc_cs_mode_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 16) & mask );
}
static inline uint32_t acc_cs_mode_read(void) {
	uint32_t word = acc_cs_read();
	return acc_cs_mode_extract(word);
}
static inline uint32_t acc_cs_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void acc_cs_mode_write(uint32_t plain_value) {
	uint32_t oldword = acc_cs_read();
	uint32_t newword = acc_cs_mode_replace(oldword, plain_value);
	acc_cs_write(newword);
}
#define CSR_ACC_LOOPBACK_ADDR (CSR_BASE + 0x1814L)
#define CSR_ACC_LOOPBACK_SIZE 1
static inline uint32_t acc_loopback_read(void) {
	return csr_read_simple(CSR_BASE + 0x1814L);
}
static inline void acc_loopback_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1814L);
}
#define CSR_ACC_LOOPBACK_MODE_OFFSET 0
#define CSR_ACC_LOOPBACK_MODE_SIZE 1
static inline uint32_t acc_loopback_mode_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t acc_loopback_mode_read(void) {
	uint32_t word = acc_loopback_read();
	return acc_loopback_mode_extract(word);
}
static inline uint32_t acc_loopback_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void acc_loopback_mode_write(uint32_t plain_value) {
	uint32_t oldword = acc_loopback_read();
	uint32_t newword = acc_loopback_mode_replace(oldword, plain_value);
	acc_loopback_write(newword);
}

/* display1 */
#define CSR_DISPLAY1_BASE (CSR_BASE + 0x2000L)
#define CSR_DISPLAY1_VALUE_ADDR (CSR_BASE + 0x2000L)
#define CSR_DISPLAY1_VALUE_SIZE 1
static inline uint32_t display1_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void display1_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_DISPLAY1_WRITE_ADDR (CSR_BASE + 0x2004L)
#define CSR_DISPLAY1_WRITE_SIZE 1
static inline uint32_t display1_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
static inline void display1_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2004L);
}

/* display2 */
#define CSR_DISPLAY2_BASE (CSR_BASE + 0x2800L)
#define CSR_DISPLAY2_VALUE_ADDR (CSR_BASE + 0x2800L)
#define CSR_DISPLAY2_VALUE_SIZE 1
static inline uint32_t display2_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void display2_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}
#define CSR_DISPLAY2_WRITE_ADDR (CSR_BASE + 0x2804L)
#define CSR_DISPLAY2_WRITE_SIZE 1
static inline uint32_t display2_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x2804L);
}
static inline void display2_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2804L);
}

/* display3 */
#define CSR_DISPLAY3_BASE (CSR_BASE + 0x3000L)
#define CSR_DISPLAY3_VALUE_ADDR (CSR_BASE + 0x3000L)
#define CSR_DISPLAY3_VALUE_SIZE 1
static inline uint32_t display3_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void display3_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_DISPLAY3_WRITE_ADDR (CSR_BASE + 0x3004L)
#define CSR_DISPLAY3_WRITE_SIZE 1
static inline uint32_t display3_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
static inline void display3_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3004L);
}

/* display4 */
#define CSR_DISPLAY4_BASE (CSR_BASE + 0x3800L)
#define CSR_DISPLAY4_VALUE_ADDR (CSR_BASE + 0x3800L)
#define CSR_DISPLAY4_VALUE_SIZE 1
static inline uint32_t display4_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void display4_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}
#define CSR_DISPLAY4_WRITE_ADDR (CSR_BASE + 0x3804L)
#define CSR_DISPLAY4_WRITE_SIZE 1
static inline uint32_t display4_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
static inline void display4_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3804L);
}

/* display5 */
#define CSR_DISPLAY5_BASE (CSR_BASE + 0x4000L)
#define CSR_DISPLAY5_VALUE_ADDR (CSR_BASE + 0x4000L)
#define CSR_DISPLAY5_VALUE_SIZE 1
static inline uint32_t display5_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void display5_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_DISPLAY5_WRITE_ADDR (CSR_BASE + 0x4004L)
#define CSR_DISPLAY5_WRITE_SIZE 1
static inline uint32_t display5_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
static inline void display5_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4004L);
}

/* display6 */
#define CSR_DISPLAY6_BASE (CSR_BASE + 0x4800L)
#define CSR_DISPLAY6_VALUE_ADDR (CSR_BASE + 0x4800L)
#define CSR_DISPLAY6_VALUE_SIZE 1
static inline uint32_t display6_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
static inline void display6_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4800L);
}
#define CSR_DISPLAY6_WRITE_ADDR (CSR_BASE + 0x4804L)
#define CSR_DISPLAY6_WRITE_SIZE 1
static inline uint32_t display6_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x4804L);
}
static inline void display6_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4804L);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x5000L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x5000L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5000L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x5004L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x5008L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x5800L)

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x6000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x6000L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x6000L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6000L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x6004L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x6004L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6004L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x6008L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x6008L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6008L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x600cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x600cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x600cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x6010L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x6010L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x6014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x6014L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x6018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x6018L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6018L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x601cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x601cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x601cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x6800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x6800L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x6800L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6800L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x6804L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x6804L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x6808L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x6808L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x680cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x680cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x6810L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x6810L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6810L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x6814L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x6814L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6814L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x6818L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x6818L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x681cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x681cL);
}

#endif
