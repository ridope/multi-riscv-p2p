//--------------------------------------------------------------------------------
// Auto-generated by Migen (94db729) & LiteX (3fde2512) on 2022-03-15 18:37:21
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}

/* switches */
#define CSR_SWITCHES_BASE (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_ADDR (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_SIZE 1
static inline uint32_t switches_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}

/* buttons */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_SIZE 1
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}

/* display1 */
#define CSR_DISPLAY1_BASE (CSR_BASE + 0x1800L)
#define CSR_DISPLAY1_VALUE_ADDR (CSR_BASE + 0x1800L)
#define CSR_DISPLAY1_VALUE_SIZE 1
static inline uint32_t display1_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void display1_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}
#define CSR_DISPLAY1_WRITE_ADDR (CSR_BASE + 0x1804L)
#define CSR_DISPLAY1_WRITE_SIZE 1
static inline uint32_t display1_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}
static inline void display1_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1804L);
}

/* display2 */
#define CSR_DISPLAY2_BASE (CSR_BASE + 0x2000L)
#define CSR_DISPLAY2_VALUE_ADDR (CSR_BASE + 0x2000L)
#define CSR_DISPLAY2_VALUE_SIZE 1
static inline uint32_t display2_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void display2_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_DISPLAY2_WRITE_ADDR (CSR_BASE + 0x2004L)
#define CSR_DISPLAY2_WRITE_SIZE 1
static inline uint32_t display2_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
static inline void display2_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2004L);
}

/* display3 */
#define CSR_DISPLAY3_BASE (CSR_BASE + 0x2800L)
#define CSR_DISPLAY3_VALUE_ADDR (CSR_BASE + 0x2800L)
#define CSR_DISPLAY3_VALUE_SIZE 1
static inline uint32_t display3_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void display3_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}
#define CSR_DISPLAY3_WRITE_ADDR (CSR_BASE + 0x2804L)
#define CSR_DISPLAY3_WRITE_SIZE 1
static inline uint32_t display3_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x2804L);
}
static inline void display3_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2804L);
}

/* display4 */
#define CSR_DISPLAY4_BASE (CSR_BASE + 0x3000L)
#define CSR_DISPLAY4_VALUE_ADDR (CSR_BASE + 0x3000L)
#define CSR_DISPLAY4_VALUE_SIZE 1
static inline uint32_t display4_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void display4_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_DISPLAY4_WRITE_ADDR (CSR_BASE + 0x3004L)
#define CSR_DISPLAY4_WRITE_SIZE 1
static inline uint32_t display4_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
static inline void display4_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3004L);
}

/* display5 */
#define CSR_DISPLAY5_BASE (CSR_BASE + 0x3800L)
#define CSR_DISPLAY5_VALUE_ADDR (CSR_BASE + 0x3800L)
#define CSR_DISPLAY5_VALUE_SIZE 1
static inline uint32_t display5_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void display5_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}
#define CSR_DISPLAY5_WRITE_ADDR (CSR_BASE + 0x3804L)
#define CSR_DISPLAY5_WRITE_SIZE 1
static inline uint32_t display5_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
static inline void display5_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3804L);
}

/* display6 */
#define CSR_DISPLAY6_BASE (CSR_BASE + 0x4000L)
#define CSR_DISPLAY6_VALUE_ADDR (CSR_BASE + 0x4000L)
#define CSR_DISPLAY6_VALUE_SIZE 1
static inline uint32_t display6_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void display6_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_DISPLAY6_WRITE_ADDR (CSR_BASE + 0x4004L)
#define CSR_DISPLAY6_WRITE_SIZE 1
static inline uint32_t display6_write_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
static inline void display6_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4004L);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x4800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x4800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4800L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x4804L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4804L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x4808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x4808L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x5000L)

#endif
