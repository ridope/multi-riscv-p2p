//--------------------------------------------------------------------------------
// Auto-generated by Migen (94db729) & LiteX (3fde2512) on 2022-03-01 20:21:58
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}

/* switches */
#define CSR_SWITCHES_BASE (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_ADDR (CSR_BASE + 0x800L)
#define CSR_SWITCHES_IN_SIZE 1
static inline uint32_t switches_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}

/* buttons */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x1000L)
#define CSR_BUTTONS_IN_SIZE 1
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}

/* adxl362 */
#define CSR_ADXL362_BASE (CSR_BASE + 0x1800L)
#define CSR_ADXL362_CONTROL_ADDR (CSR_BASE + 0x1800L)
#define CSR_ADXL362_CONTROL_SIZE 1
static inline uint32_t adxl362_control_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void adxl362_control_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}
#define CSR_ADXL362_CONTROL_START_OFFSET 0
#define CSR_ADXL362_CONTROL_START_SIZE 1
static inline uint32_t adxl362_control_start_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t adxl362_control_start_read(void) {
	uint32_t word = adxl362_control_read();
	return adxl362_control_start_extract(word);
}
static inline uint32_t adxl362_control_start_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void adxl362_control_start_write(uint32_t plain_value) {
	uint32_t oldword = adxl362_control_read();
	uint32_t newword = adxl362_control_start_replace(oldword, plain_value);
	adxl362_control_write(newword);
}
#define CSR_ADXL362_CONTROL_LENGTH_OFFSET 8
#define CSR_ADXL362_CONTROL_LENGTH_SIZE 8
static inline uint32_t adxl362_control_length_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 8)-1);
	return ( (oldword >> 8) & mask );
}
static inline uint32_t adxl362_control_length_read(void) {
	uint32_t word = adxl362_control_read();
	return adxl362_control_length_extract(word);
}
static inline uint32_t adxl362_control_length_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 8)-1);
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void adxl362_control_length_write(uint32_t plain_value) {
	uint32_t oldword = adxl362_control_read();
	uint32_t newword = adxl362_control_length_replace(oldword, plain_value);
	adxl362_control_write(newword);
}
#define CSR_ADXL362_STATUS_ADDR (CSR_BASE + 0x1804L)
#define CSR_ADXL362_STATUS_SIZE 1
static inline uint32_t adxl362_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}
#define CSR_ADXL362_STATUS_DONE_OFFSET 0
#define CSR_ADXL362_STATUS_DONE_SIZE 1
static inline uint32_t adxl362_status_done_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t adxl362_status_done_read(void) {
	uint32_t word = adxl362_status_read();
	return adxl362_status_done_extract(word);
}
#define CSR_ADXL362_MOSI_ADDR (CSR_BASE + 0x1808L)
#define CSR_ADXL362_MOSI_SIZE 1
static inline uint32_t adxl362_mosi_read(void) {
	return csr_read_simple(CSR_BASE + 0x1808L);
}
static inline void adxl362_mosi_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1808L);
}
#define CSR_ADXL362_MISO_ADDR (CSR_BASE + 0x180cL)
#define CSR_ADXL362_MISO_SIZE 1
static inline uint32_t adxl362_miso_read(void) {
	return csr_read_simple(CSR_BASE + 0x180cL);
}
#define CSR_ADXL362_CS_ADDR (CSR_BASE + 0x1810L)
#define CSR_ADXL362_CS_SIZE 1
static inline uint32_t adxl362_cs_read(void) {
	return csr_read_simple(CSR_BASE + 0x1810L);
}
static inline void adxl362_cs_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1810L);
}
#define CSR_ADXL362_CS_SEL_OFFSET 0
#define CSR_ADXL362_CS_SEL_SIZE 1
static inline uint32_t adxl362_cs_sel_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t adxl362_cs_sel_read(void) {
	uint32_t word = adxl362_cs_read();
	return adxl362_cs_sel_extract(word);
}
static inline uint32_t adxl362_cs_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void adxl362_cs_sel_write(uint32_t plain_value) {
	uint32_t oldword = adxl362_cs_read();
	uint32_t newword = adxl362_cs_sel_replace(oldword, plain_value);
	adxl362_cs_write(newword);
}
#define CSR_ADXL362_CS_MODE_OFFSET 16
#define CSR_ADXL362_CS_MODE_SIZE 1
static inline uint32_t adxl362_cs_mode_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 16) & mask );
}
static inline uint32_t adxl362_cs_mode_read(void) {
	uint32_t word = adxl362_cs_read();
	return adxl362_cs_mode_extract(word);
}
static inline uint32_t adxl362_cs_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void adxl362_cs_mode_write(uint32_t plain_value) {
	uint32_t oldword = adxl362_cs_read();
	uint32_t newword = adxl362_cs_mode_replace(oldword, plain_value);
	adxl362_cs_write(newword);
}
#define CSR_ADXL362_LOOPBACK_ADDR (CSR_BASE + 0x1814L)
#define CSR_ADXL362_LOOPBACK_SIZE 1
static inline uint32_t adxl362_loopback_read(void) {
	return csr_read_simple(CSR_BASE + 0x1814L);
}
static inline void adxl362_loopback_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1814L);
}
#define CSR_ADXL362_LOOPBACK_MODE_OFFSET 0
#define CSR_ADXL362_LOOPBACK_MODE_SIZE 1
static inline uint32_t adxl362_loopback_mode_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t adxl362_loopback_mode_read(void) {
	uint32_t word = adxl362_loopback_read();
	return adxl362_loopback_mode_extract(word);
}
static inline uint32_t adxl362_loopback_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void adxl362_loopback_mode_write(uint32_t plain_value) {
	uint32_t oldword = adxl362_loopback_read();
	uint32_t newword = adxl362_loopback_mode_replace(oldword, plain_value);
	adxl362_loopback_write(newword);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x5000L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x5000L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5000L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x5004L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x5008L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x5800L)

#endif
